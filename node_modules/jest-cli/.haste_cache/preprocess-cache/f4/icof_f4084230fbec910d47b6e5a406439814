var Component, DOM, ICOF, ICOFCell, React, arrayOf, createElement, div, number, ref, shape, string,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

React = require('react');

Component = React.Component, DOM = React.DOM, createElement = React.createElement;

div = DOM.div;

ref = React.PropTypes, string = ref.string, arrayOf = ref.arrayOf, shape = ref.shape, number = ref.number;

ICOFCell = require("./../icof-cell/icof-cell");

ICOF = (function(superClass) {
  extend(ICOF, superClass);

  ICOF.prototype._cssPrefix = "icof";

  ICOF.propTypes = {
    icofName: string.isRequired,
    children: arrayOf(shape({
      content: string,
      id: number.isRequired
    }))
  };

  function ICOF(props) {
    this.render = bind(this.render, this);
    this.state = {
      children: props.children
    };
  }

  ICOF.prototype.render = function() {
    var child;
    return div({
      className: "" + this._cssPrefix
    }, createElement(ICOFCell, {
      content: this.props.icofName,
      key: 0
    }), (function() {
      var i, len, ref1, results;
      ref1 = this.state.children;
      results = [];
      for (i = 0, len = ref1.length; i < len; i++) {
        child = ref1[i];
        results.push(createElement(ICOFCell, {
          content: child.content,
          key: child.id
        }));
      }
      return results;
    }).call(this));
  };

  return ICOF;

})(Component);

module.exports = ICOF;
